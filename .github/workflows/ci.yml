name: CI

on:
  push:
    branches:
      - master
      - 3.next
  pull_request:
    branches:
      - '*'

jobs:
  testsuite-linux:
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        php-version: ['7.2', '8.0', '8.1']
        db-type: [mysql, pgsql, sqlite]
        prefer-lowest: ['']
        include:
          - php-version: '7.2'
            db-type: 'sqlite'
            prefer-lowest: 'prefer-lowest'

    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: pg-password
          POSTGRES_DB: cakephp_test

    steps:
    - uses: actions/checkout@v3

    - name: Setup MySQL
      if: matrix.db-type == 'mysql'
      run: |
        sudo service mysql start
        mysql -h 127.0.0.1 -u root -proot -e 'CREATE DATABASE cakephp_test DEFAULT COLLATE=utf8mb4_general_ci;'
        mysql -h 127.0.0.1 -u root -proot -e 'CREATE DATABASE cakephp_comparisons;'

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, intl, pdo_${{ matrix.db-type }}
        coverage: pcov

    - name: Get composer cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"

    - name: Get date part for cache key
      id: key-date
      run: echo "::set-output name=date::$(date +'%Y-%m')"

    - name: Cache composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ steps.key-date.outputs.date }}-${{ hashFiles('composer.json') }}-${{ matrix.prefer-lowest }}

    - name: Composer install
      run: |
        if [[ ${{ matrix.php-version }} == '8.1' ]]; then
          composer install --ignore-platform-reqs
        elif ${{ matrix.prefer-lowest == 'prefer-lowest' }}; then
          composer update --prefer-lowest --prefer-stable
        else
          composer update
        fi

    - name: Run PHPUnit
      run: |
        if [[ ${{ matrix.db-type }} == 'sqlite' ]]; then
          export DB='sqlite'
        fi
        if [[ ${{ matrix.db-type }} == 'mysql' ]]; then
          export DB='mysql'
          export DB_URL='mysql://root:root@127.0.0.1/cakephp_test'
          export DB_URL_COMPARE='mysql://root:root@127.0.0.1/cakephp_comparisons'
        fi
        if [[ ${{ matrix.db-type }} == 'pgsql' ]]; then
          export DB='pgsql'
          export DB_URL='postgres://postgres:pg-password@127.0.0.1/cakephp_test'
        fi
        if [[ ${{ matrix.php-version }} == '7.4' && ${{ matrix.db-type }} == 'mysql' ]]; then
          vendor/bin/phpunit --coverage-clover=coverage.xml
        else
          vendor/bin/phpunit
        fi

    - name: Code Coverage Report
      if: success() && matrix.php-version == '7.4' && matrix.db-type == 'mysql'
      uses: codecov/codecov-action@v3

  cs-stan:
    name: Coding Standard & Static Analysis
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '7.4'
        extensions: mbstring, intl
        coverage: none
        tools: cs2pr

    - name: Get composer cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"

    - name: Get date part for cache key
      id: key-date
      run: echo "::set-output name=date::$(date +'%Y-%m')"

    - name: Cache composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ steps.key-date.outputs.date }}-${{ hashFiles('composer.json') }}-${{ matrix.prefer-lowest }}

    - name: Composer install
      run: composer stan-setup

    - name: Run phpcs
      run: vendor/bin/phpcs --report=checkstyle src/ tests/ | cs2pr

    - name: Run psalm
      if: success() || failure()
      run: vendor/bin/psalm.phar --output-format=github

    - name: Run phpstan
      if: success() || failure()
      run: vendor/bin/phpstan analyse src/
